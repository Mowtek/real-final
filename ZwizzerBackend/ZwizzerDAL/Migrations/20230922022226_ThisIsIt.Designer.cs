// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZwizzerDAL;

#nullable disable

namespace ZwizzerDAL.Migrations
{
    [DbContext(typeof(ZwizzerContext))]
    [Migration("20230922022226_ThisIsIt")]
    partial class ThisIsIt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ZwizzerDAL.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ZweetId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZweetId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            Content = "What a great era to be alive, now that we have Zwizzer!",
                            CreationTime = new DateTime(2023, 9, 22, 4, 28, 26, 346, DateTimeKind.Local).AddTicks(4543),
                            UserId = 3,
                            ZweetId = 4
                        },
                        new
                        {
                            CommentId = 2,
                            Content = "Thank you for being the first testers of our lovely Social Media - Zwizzer!",
                            CreationTime = new DateTime(2023, 9, 22, 4, 30, 50, 346, DateTimeKind.Local).AddTicks(4547),
                            UserId = 1,
                            ZweetId = 4
                        });
                });

            modelBuilder.Entity("ZwizzerDAL.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("ZweetId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZweetId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            LikeId = 1,
                            UserId = 1,
                            ZweetId = 1
                        },
                        new
                        {
                            LikeId = 2,
                            UserId = 2,
                            ZweetId = 1
                        },
                        new
                        {
                            LikeId = 3,
                            UserId = 3,
                            ZweetId = 1
                        },
                        new
                        {
                            LikeId = 4,
                            UserId = 1,
                            ZweetId = 2
                        },
                        new
                        {
                            LikeId = 5,
                            UserId = 2,
                            ZweetId = 2
                        },
                        new
                        {
                            LikeId = 6,
                            UserId = 1,
                            ZweetId = 3
                        },
                        new
                        {
                            LikeId = 7,
                            UserId = 2,
                            ZweetId = 3
                        },
                        new
                        {
                            LikeId = 8,
                            UserId = 3,
                            ZweetId = 3
                        },
                        new
                        {
                            LikeId = 9,
                            UserId = 1,
                            ZweetId = 6
                        },
                        new
                        {
                            LikeId = 10,
                            UserId = 2,
                            ZweetId = 6
                        },
                        new
                        {
                            LikeId = 11,
                            CommentId = 1,
                            UserId = 1
                        },
                        new
                        {
                            LikeId = 12,
                            CommentId = 1,
                            UserId = 2
                        },
                        new
                        {
                            LikeId = 13,
                            CommentId = 2,
                            UserId = 2
                        },
                        new
                        {
                            LikeId = 14,
                            CommentId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ZwizzerDAL.Rezweet", b =>
                {
                    b.Property<int>("RezweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezweetId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ZweetId")
                        .HasColumnType("int");

                    b.HasKey("RezweetId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZweetId");

                    b.ToTable("Rezweets");

                    b.HasData(
                        new
                        {
                            RezweetId = 1,
                            UserId = 1,
                            ZweetId = 3
                        },
                        new
                        {
                            RezweetId = 2,
                            UserId = 1,
                            ZweetId = 5
                        },
                        new
                        {
                            RezweetId = 3,
                            UserId = 3,
                            ZweetId = 4
                        },
                        new
                        {
                            RezweetId = 4,
                            UserId = 2,
                            ZweetId = 1
                        },
                        new
                        {
                            RezweetId = 5,
                            UserId = 3,
                            ZweetId = 1
                        });
                });

            modelBuilder.Entity("ZwizzerDAL.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("BackgroundImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BackgroundImagePath = "/BackgroundImages/default.jpg",
                            Bio = "Welcome to my Zwizzer profile! I'm an Admin!",
                            Email = "Admin@gmail.com",
                            HashedPassword = "AQAAAAIAAYagAAAAEEu4Qe5cMaehcSGOiOsZJGetVww0qaL9vDvghghShobH12EpEQPFSprBZq7+Is+eJQ==",
                            ProfileImagePath = "/ProfileImages/default.jpg",
                            UserName = "Admin",
                            UserRole = 2
                        },
                        new
                        {
                            UserId = 2,
                            BackgroundImagePath = "/BackgroundImages/default.jpg",
                            Bio = "Welcome to my Zwizzer profile! I'm a Subscriber!",
                            Email = "Sharon@gmail.com",
                            HashedPassword = "AQAAAAIAAYagAAAAEFo7nxU1llvDH7ESD5m5EZk8gFdK6kpvxDLxs4Ck3Alzyio32m8tjWJWLR6wnf/DsA==",
                            ProfileImagePath = "/ProfileImages/default.jpg",
                            UserName = "Sharon",
                            UserRole = 1
                        },
                        new
                        {
                            UserId = 3,
                            BackgroundImagePath = "/BackgroundImages/default.jpg",
                            Bio = "Welcome to my Zwizzer profile! I'm a User!",
                            Email = "SickGamer420@gmail.com",
                            HashedPassword = "AQAAAAIAAYagAAAAECggEdD+4NE3v1/EYNF2zXcAxbP3ThiwQg+Gwe7Lh7rGkpYuy/wNrECu0SUpPTxjtg==",
                            ProfileImagePath = "/ProfileImages/default.jpg",
                            UserName = "SickGamer420",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("ZwizzerDAL.Zweet", b =>
                {
                    b.Property<int>("ZweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZweetId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ZweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Zweets");

                    b.HasData(
                        new
                        {
                            ZweetId = 1,
                            Content = "This is the first ever Zweet on Zwizzer!",
                            CreationTime = new DateTime(2023, 9, 22, 3, 22, 26, 346, DateTimeKind.Local).AddTicks(4326),
                            UserId = 1
                        },
                        new
                        {
                            ZweetId = 2,
                            Content = "This is the second ever Zweet on Zwizzer! also, used as a test.",
                            CreationTime = new DateTime(2023, 9, 22, 3, 52, 26, 346, DateTimeKind.Local).AddTicks(4370),
                            UserId = 1
                        },
                        new
                        {
                            ZweetId = 3,
                            Content = "I heard of this about this new platform from my friends, guess im one of the firsts to use it!",
                            CreationTime = new DateTime(2023, 9, 22, 4, 16, 26, 346, DateTimeKind.Local).AddTicks(4374),
                            UserId = 2
                        },
                        new
                        {
                            ZweetId = 4,
                            Content = "So how's everybody day has been going?",
                            CreationTime = new DateTime(2023, 9, 22, 4, 22, 26, 346, DateTimeKind.Local).AddTicks(4376),
                            UserId = 2
                        },
                        new
                        {
                            ZweetId = 5,
                            Content = "Are there any games on this platform? I want to beat all the records on them!",
                            CreationTime = new DateTime(2023, 9, 22, 4, 52, 26, 346, DateTimeKind.Local).AddTicks(4378),
                            UserId = 3
                        },
                        new
                        {
                            ZweetId = 6,
                            Content = "Looking for group 4 World of Warcraft, any joiners?",
                            CreationTime = new DateTime(2023, 9, 22, 4, 54, 14, 346, DateTimeKind.Local).AddTicks(4442),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ZwizzerDAL.Comment", b =>
                {
                    b.HasOne("ZwizzerDAL.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ZwizzerDAL.Zweet", "Zweet")
                        .WithMany("Comments")
                        .HasForeignKey("ZweetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Zweet");
                });

            modelBuilder.Entity("ZwizzerDAL.Like", b =>
                {
                    b.HasOne("ZwizzerDAL.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ZwizzerDAL.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ZwizzerDAL.Zweet", "Zweet")
                        .WithMany("Likes")
                        .HasForeignKey("ZweetId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Comment");

                    b.Navigation("User");

                    b.Navigation("Zweet");
                });

            modelBuilder.Entity("ZwizzerDAL.Rezweet", b =>
                {
                    b.HasOne("ZwizzerDAL.User", "User")
                        .WithMany("Rezweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ZwizzerDAL.Zweet", "Zweet")
                        .WithMany("Rezweets")
                        .HasForeignKey("ZweetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Zweet");
                });

            modelBuilder.Entity("ZwizzerDAL.Zweet", b =>
                {
                    b.HasOne("ZwizzerDAL.User", "User")
                        .WithMany("Zweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZwizzerDAL.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ZwizzerDAL.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Rezweets");

                    b.Navigation("Zweets");
                });

            modelBuilder.Entity("ZwizzerDAL.Zweet", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Rezweets");
                });
#pragma warning restore 612, 618
        }
    }
}
